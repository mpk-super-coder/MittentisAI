import os.path
import base64

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.exceptions import RefreshError
from googleapiclient.discovery import build
import google.generativeai as genai
import email.mime.text
import re

import time

# If modifying these scopes, delete the file token.json.
SCOPES = ['https://www.googleapis.com/auth/gmail.readonly', 'https://www.googleapis.com/auth/gmail.modify']


def create_service():
    creds = None
    if os.path.exists('token.json'):
        creds = Credentials.from_authorized_user_file('token.json')
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        with open('token.json', 'w') as token:
            token.write(creds.to_json())

    service = build('gmail', 'v1', credentials=creds)
    return service


def list_unread_messages(service, user_id='me'):
    response = service.users().messages().list(userId=user_id, labelIds=['UNREAD']).execute()
    messages = []
    if 'messages' in response:
        messages.extend(response['messages'])

    for message in messages:
        msg = service.users().messages().get(userId=user_id, id=message['id']).execute()
        body = ''
        subject = ''
        if 'parts' in msg['payload']:
            for part in msg['payload']['parts']:
                if part['mimeType'] == 'text/plain':
                    body = base64.urlsafe_b64decode(part['body']['data'].encode('UTF-8')).decode('UTF-8')
                    break
        subject = next((header['value'] for header in msg['payload']['headers'] if header['name'] == 'Subject'), '')

        sender = get_sender_email(msg)
        recipient = "mittentisai@gmail.com"

        print(sender, recipient)

        sender = re.search(r'[\w\.-]+@[\w\.-]+', sender).group()

        gemini_api_key = "AIzaSyCl91V_mNJ4eQOQ9sb_6J5l8a7mL0DowJA"
        genai.configure(api_key=gemini_api_key)
        model = genai.GenerativeModel('gemini-pro')
        response_text = "You are Mittentis. What you do is simple - reply to the emails you recieve and try your best to give them solution. You are created by 'The Great' Kannan Murugapandian. Create a reply to the email below while ensuring that it does not contain any URLs to websites or phone numbers or email addresses, if the sender's name is not mentioned just address them by Sender. You do not have any website/phone nmber, if you don't know anything just leave it and DO NOT MAKE THINGS UP. You are only available by email. Note that whatever you give as a response would be sent to the sender of the below email. So if you cannot generate a reply, just do not give any reponse. This is the email you recieved:" + body
        bodys = model.generate_content(response_text)
        print("Sender:", sender, "Recipient:", recipient, subject, bodys.prompt_feedback)
        bodys = bodys.text+"\nDISCLAIMER: This email has been generated by an artificial intelligence system. While efforts have been made to ensure accuracy, there is a possibility of errors or inaccuracies. It is advisable to independently verify any information provided in this email. The creator of this AI system is not liable for any misinformation or inaccuracies contained herein. Additionally, the inclusion of any links, phone numbers, or email addresses in this email does not imply endorsement or guarantee of their validity. The content of this email, up to this disclaimer, has been generated by Google's Gemini. Mittentis is created by Kannan Murugapandian."
        send_new_email(service, recipient, sender, subject, bodys)

        service.users().messages().modify(userId=user_id, id=message['id'],
                                          body={'removeLabelIds': ['UNREAD']}).execute()


def get_sender_email(message):
    for header in message['payload']['headers']:
        if header['name'] == 'From':
            return header['value']


def send_new_email(service, sender, recipient, subject, body, user_id='me'):
    message = email.mime.text.MIMEText(body)
    message['to'] = recipient
    message['from'] = sender
    message['bcc'] = "mkannan2k9@gmail.com"
    message['subject'] = subject
    raw_message = base64.urlsafe_b64encode(message.as_bytes()).decode()
    sent_message = service.users().messages().send(userId=user_id, body={'raw': raw_message}).execute()
    print("New email sent successfully!")


def main():
    while True:
        total_seconds = 60
        while total_seconds > 0:
            if total_seconds % 60 == 0:
                time.sleep(10)
            #time.sleep(1)
            total_seconds -= 1
            service = create_service()
            list_unread_messages(service)
            time.sleep(1)

if __name__ == '__main__':
    main()